// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: post.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
insert into post (grade,subject,address,owner_id,extra) values(
    $1,$2,$3,$4,$5
) returning id, grade, subject, address, extra, post_time, available, owner_id
`

type CreatePostParams struct {
	Grade     int32          `json:"grade"`
	Subject   []string       `json:"subject"`
	Address   string         `json:"address"`
	OwnerID   int64          `json:"owner_id"`
	ExtraInfo sql.NullString `json:"extra_info"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Grade,
		pq.Array(arg.Subject),
		arg.Address,
		arg.OwnerID,
		arg.ExtraInfo,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Grade,
		pq.Array(&i.Subject),
		&i.Address,
		&i.Extra,
		&i.PostTime,
		&i.Available,
		&i.OwnerID,
	)
	return i, err
}

const getPost = `-- name: GetPost :many
select id, grade, subject, address, extra, post_time, available, owner_id from post
`

func (q *Queries) GetPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Grade,
			pq.Array(&i.Subject),
			&i.Address,
			&i.Extra,
			&i.PostTime,
			&i.Available,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
select id, grade, subject, address, extra, post_time, available, owner_id from post where id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Grade,
		pq.Array(&i.Subject),
		&i.Address,
		&i.Extra,
		&i.PostTime,
		&i.Available,
		&i.OwnerID,
	)
	return i, err
}

const getPostByOwner = `-- name: GetPostByOwner :many
select id, grade, subject, address, extra, post_time, available, owner_id from post where owner_id = $1
`

func (q *Queries) GetPostByOwner(ctx context.Context, ownerID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Grade,
			pq.Array(&i.Subject),
			&i.Address,
			&i.Extra,
			&i.PostTime,
			&i.Available,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Gender string

const (
	GenderM Gender = "M"
	GenderF Gender = "F"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type Customer struct {
	ID        int64          `json:"id"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	FullName  string         `json:"full_name"`
	Tel       string         `json:"tel"`
	Address   sql.NullString `json:"address"`
	Confirmed bool           `json:"confirmed"`
}

type Post struct {
	ID        int64          `json:"id"`
	Grade     int32          `json:"grade"`
	Subject   []string       `json:"subject"`
	Address   string         `json:"address"`
	Extra     sql.NullString `json:"extra"`
	PostTime  time.Time      `json:"post_time"`
	Available bool           `json:"available"`
	OwnerID   int64          `json:"owner_id"`
}

type PostRegister struct {
	Approved  bool  `json:"approved"`
	TeacherID int64 `json:"teacher_id"`
	PostID    int64 `json:"post_id"`
}

type Teacher struct {
	ID        int64          `json:"id"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	FullName  string         `json:"full_name"`
	Tel       string         `json:"tel"`
	Address   sql.NullString `json:"address"`
	Grade     []int32        `json:"grade"`
	Subject   []string       `json:"subject"`
	Gender    Gender         `json:"gender"`
	Confirmed bool           `json:"confirmed"`
}

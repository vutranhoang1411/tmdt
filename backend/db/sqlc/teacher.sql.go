// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: teacher.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getTeacherByID = `-- name: GetTeacherByID :one
select id, email, password, full_name, tel, address, grade, subject, gender, confirmed from teacher where id=$1
`

func (q *Queries) GetTeacherByID(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByID, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.Tel,
		&i.Address,
		pq.Array(&i.Grade),
		pq.Array(&i.Subject),
		&i.Gender,
		&i.Confirmed,
	)
	return i, err
}

const getTeacherByPost = `-- name: GetTeacherByPost :many
select 	teacher.id, full_name, gender, approved  
from teacher join post_register on teacher.id=post_register.teacher_id 
where post_register.post_id=$1
`

type GetTeacherByPostRow struct {
	ID       int64  `json:"id"`
	FullName string `json:"full_name"`
	Gender   Gender `json:"gender"`
	Approved bool   `json:"approved"`
}

func (q *Queries) GetTeacherByPost(ctx context.Context, postID int64) ([]GetTeacherByPostRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTeacherByPostRow{}
	for rows.Next() {
		var i GetTeacherByPostRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Gender,
			&i.Approved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
